const punycode = require('punycode');

var map = {
    " ": " ",
    "‚Öã": "&",
    "%": ["%"],
    "Ôºê": ["0"],
    "Ôºë": ["1"],
    "Ôºí": ["2"],
    "Ôºì": ["3"],
    "Ôºî": ["4"],
    "Ôºï": ["5"],
    "Ôºñ": ["6"],
    "Ôºó": ["7"],
    "Ôºò": ["8"],
    "Ôºô": ["9"],
    "Ôºú": ["<"],
    "Ôºû": [">"],
    "„Äê": ["["],
    "„Äë": ["]"],
    "‚ú©": ["*"],
    "(": ["("],
    ")": [")"],
    "ùì™": ["a", "A"],
    "ùí∑": ["b", "B"],
    "ùì¨": ["c", "C"],
    "ùíπ": ["d", "D"],
    "ùíÜ": ["e", "E"],
    "ùíª": ["f", "F"],
    "ùì∞": ["g", "G"],
    "ùíΩ": ["h", "H"],
    "ùíæ": ["i", "I"],
    "ùíø": ["j", "J"],
    "ùìÄ": ["k", "K"],
    "ùìÅ": ["l", "L"],
    "ùìÇ": ["m", "M"],
    "ùìÉ": ["n", "N"],
    "ùëú": ["o", "O"],
    "ùìÖ": ["p", "P"],
    "ùìÜ": ["q", "Q"],
    "ùìá": ["r", "R"],
    "ùìà": ["s", "S"],
    "ùìâ": ["t", "T"],
    "ùìä": ["u", "U"],
    "ùìã": ["v", "V"],
    "ùìå": ["w", "W"],
    "ùìç": ["x", "X"],
    "ùìé": ["y", "Y"],
    "ùìè": ["z", "Z"],
    ";": [";"],
    ":": [":"],
    "'": ["'"],
    "\"": ["\""],
    "\\": ["\\"],
    "/": ["/"],
    "|": ["|"],
    "=": ["="],
    "+": ["+"],
    "-": ["-"],
    "_": ["_"],
    "^": ["^"],
    "!": ["!"],
    "`": ["`"],
    ".": ["."],
    ",": [","]
};
function getKeyByValue(object, value) {
    var foundKey = "";
    Object.keys(object).find(key => {
        for (i in object[key]) {
            if (punycode.ucs2.decode(object[key][i]).toString().normalize() === value.toString().normalize()) {
                //console.log(`key: ${key}\tPunycode i: ${punycode.ucs2.decode(object[key][i])}\tValue: ${value} isEqual?: ${punycode.ucs2.decode(object[key][i]).toString().normalize() === value.toString().normalize()}`);
                foundKey = key;
            }
        }
    });
    return foundKey;
}

module.exports = {
    fancy: function (characterString) {
        var fanciedString = "";
        var punycodeArray = punycode.ucs2.decode(characterString);
        for (var i = 0; i < punycodeArray.length; i++) {
            var key = getKeyByValue(map, punycodeArray[i]);
            
            if (key == isNaN) key = punycodeArray[i];
            fanciedString += key;
        }
    
        return fanciedString;
    }
}