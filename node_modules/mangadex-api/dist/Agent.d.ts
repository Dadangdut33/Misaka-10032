import { RequestResult, ResponseType, ResponseTypeMap } from 'smol-request';
import { AgentOptions, LoginSession, MRequestOptions, Session } from '../types/agent';
export declare class Agent {
    sessionId?: string;
    sessionExpiration?: Date;
    persistentId?: string;
    hentai?: number;
    host: string;
    apiHost: string;
    getCredentials?: Session | (() => Promise<Session>) | (() => Session);
    loginCredentials?: Session | (() => Promise<Session>) | (() => Session);
    constructor({ host, apiHost, sessionId, sessionExpiration, persistentId, hentai, getCredentials, loginCredentials }?: AgentOptions);
    setSession(id: string, expiration: string | Date): void;
    setPersistent(token: string): void;
    login(username: string, password: string, rememberMe?: boolean, options?: MRequestOptions): Promise<boolean>;
    static login(username: string, password: string, rememberMe?: boolean, options?: MRequestOptions): Promise<Session>;
    logout(options?: MRequestOptions<'headers'>): Promise<boolean>;
    static logout(session: Session, options?: MRequestOptions<'headers'>): Promise<boolean>;
    _onDeleteSession(): Promise<{
        result: string;
    }>;
    loginWithSession(path: string): Promise<boolean>;
    saveSession(path: string): Promise<boolean>;
    static saveSession(path: string, session: LoginSession): Promise<boolean>;
    setCookies(cookies: string[]): boolean | Promise<{
        result: string;
    }>;
    getCookie(): string;
    checkLogin(): Promise<boolean>;
    call<K, T extends ResponseType = 'text'>(url: string, options?: MRequestOptions<T>, body?: Record<string, unknown>): Promise<NonNullable<ResponseTypeMap<K>[T]>>;
    static call<K, T extends ResponseType = 'text'>(url: string, options?: MRequestOptions<T>, body?: Record<string, unknown>): Promise<RequestResult<NonNullable<ResponseTypeMap<K>[T]>>>;
    callApi<K>(url: string, options?: MRequestOptions<'json'>, body?: Record<string, unknown>): Promise<K>;
    static callApi<T>(url: string, options?: MRequestOptions<'json'>, body?: Record<string, unknown>): Promise<T>;
    callAjaxAction(params: {
        [k: string]: unknown;
    }, options?: MRequestOptions<'headers'>, body?: Record<string, unknown>): Promise<RequestResult<never>>;
    static callAjaxAction(params: {
        [k: string]: unknown;
    }, options?: MRequestOptions<'headers'>, body?: Record<string, unknown>): Promise<RequestResult<never>>;
}
