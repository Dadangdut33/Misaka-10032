import { MangadexOptions, MRequestOptions, SearchQuery, SearchQueryAnonymous } from '../types/agent';
import { FollowType, MangadexHome, Relation, SearchResult } from '../types/mangadex';
import { Agent } from './Agent';
import { ChapterResolver } from './api/chapter';
import { GroupResolver } from './api/group';
import { MangaResolver } from './api/manga';
import { TagResolver } from './api/tag';
import { UserResolver } from './api/user';
export declare class Mangadex {
    private options;
    agent: Agent;
    chapter: ChapterResolver;
    group: GroupResolver;
    manga: MangaResolver;
    tag: TagResolver;
    user: UserResolver;
    static readonly chapter: typeof ChapterResolver;
    static readonly group: typeof GroupResolver;
    static readonly manga: typeof MangaResolver;
    static readonly tag: typeof TagResolver;
    static readonly user: typeof UserResolver;
    constructor(options?: MangadexOptions);
    /**
     * Search manga on mangadex
     * @param query Search query
     * @param options Request options
     */
    search(query: string | SearchQuery, options?: MRequestOptions<'text'>): Promise<SearchResult>;
    /**
     * Search manga on mangadex
     * @param query Search query
     * @param options Request options
     */
    static search(query: string | SearchQueryAnonymous, options?: MRequestOptions<'text'>): Promise<SearchResult>;
    /**
     * Quick search manga on mangadex
     * @param query Search query
     * @param options Request options
     */
    quickSearch(title: string, options?: MRequestOptions<'text'>): Promise<SearchResult>;
    /**
     * Quick search manga on mangadex
     * @param query Search query
     * @param options Request options
     */
    static quickSearch(title: string, options?: MRequestOptions<'text'>): Promise<SearchResult>;
    /**
     * Get home page of mangadex
     * @param options Request options
     */
    getHome(options?: MRequestOptions<'text'>): Promise<MangadexHome>;
    /**
     * Get home page of mangadex
     * @param options Request options
     */
    static getHome(options?: MRequestOptions<'text'>): Promise<MangadexHome>;
    friendAdd(userId: number, options?: MRequestOptions<'headers'>): Promise<boolean>;
    mangaFollow(mangaId: number, type: string, options?: MRequestOptions<'headers'>): Promise<boolean>;
    mangaUnfollow(mangaId: number, options?: MRequestOptions<'headers'>): Promise<boolean>;
    /**
     * Set manga view for search, featured section and e.t.c.
     * @param mode mode id: 0 - detailed, 1 - expanded list, 2 - simple list, 3 - grid
     * @param params request options
     */
    setMangaView(mode: number, options?: MRequestOptions<'headers'>): Promise<boolean>;
    /**
     * Get all follow types.
     * @param options Request options
     */
    getFollows(options?: MRequestOptions<'json'>): Promise<FollowType[]>;
    /**
     * Get all follow types.
     * @param options Request options
     */
    static getFollows(options?: MRequestOptions<'json'>): Promise<FollowType[]>;
    /**
     * Get all manga relation types.
     * @param options Request options
     */
    getRelations(options?: MRequestOptions<'json'>): Promise<Relation[]>;
    /**
     * Get all manga relation types.
     * @param options Request options
     */
    static getRelations(options?: MRequestOptions<'json'>): Promise<Relation[]>;
}
