"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserResolver = void 0;
const Agent_1 = require("../Agent");
const base_1 = require("./base");
const deepmerge_1 = require("../lib/deepmerge");
const Composer_1 = require("../Composer");
class UserResolver extends base_1.ApiBase {
    /**
     * Get a user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    async getUser(userId, options = {}) {
        const result = await this.agent.callApi(`user/${userId}`, options);
        return result;
    }
    /**
     * Get a user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    static async getUser(userId, options = {}) {
        const result = await Agent_1.Agent.callApi(`user/${userId}`, options);
        return result;
    }
    /**
     * Get partial information about the chapters uploaded by the user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    async getUserChapters(userId, options = {}) {
        const result = await this.agent.callApi(`user/${userId}/chapters`, options);
        return result;
    }
    /**
     * Get partial information about the chapters uploaded by the user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    static async getUserChapters(userId, options = {}) {
        const result = await Agent_1.Agent.callApi(`user/${userId}/chapters`, options);
        return result;
    }
    /**
     * (Authorization required) Get a user's followed manga and personal data for them.
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    async getUserFollowedManga(userId, options = {}) {
        const result = await this.agent.callApi(`user/${userId}/followed-manga`, options);
        return result;
    }
    /**
     * (Authorization required) Get the latest uploaded chapters for the manga that the user has followed, as well as basic related manga information.
     * Ordered by timestamp descending (the datetime when the chapter is available).
     * Limit 100 chapters per page.
     * Note that the results are automatically filtered by the authorized user's chapter language filter setting.
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    async getUserFollowedUpdates(userId, options = {}) {
        const result = await this.agent.callApi(`user/${userId}/followed-updates`, options);
        return {
            ...result,
            manga: Composer_1.Composer.formatTypeMapToArray(result.manga)
        };
    }
    /**
     * Get a user's personal data for any given manga
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param mangaId Manga id
     * @param options Request options
     */
    async getUserManga(userId, mangaId, options = {}) {
        const result = await this.agent.callApi(`user/${userId}/manga/${mangaId}`, options);
        return result;
    }
    /**
     * (Authorization required) Get a user's manga ratings
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    async getUserRatings(userId, options = {}) {
        const result = await this.agent.callApi(`user/${userId}/ratings`, options);
        return result;
    }
    /**
     * (Authorization required) Get a user's website settings.
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    async getUserSettings(userId, options = {}) {
        const result = await this.agent.callApi(`user/${userId}/settings`, options);
        return result;
    }
    /**
     * (Authorization required) Set or unset chapter read markers.
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param chapters List of chapter IDs to set or unset. Max 100 items.
     * @param read Set or unset the chapter as read. Boolean, default true.
     * @param options Request options
     */
    async setUserChapterRead(userId, chapters, read = true, options = {}) {
        const result = await this.agent.callApi(`user/${userId}/marker`, deepmerge_1.deepmerge(options, {
            method: 'POST'
        }), {
            chapters,
            read
        });
        return result;
    }
    /**
     * Get user info
     * @param options Request options
     */
    async getMe(options = {}) {
        return this.getUser('me', options);
    }
    async setHomepageSettings(args, options = {}) {
        var _a, _b, _c;
        await this.agent.callAjaxAction({
            function: 'homepage_settings'
        }, deepmerge_1.deepmerge(options, {
            method: 'POST'
        }), {
            theme_id: (_a = args.themeId) !== null && _a !== void 0 ? _a : 0,
            display_lang_id: (_b = args.displayLangId) !== null && _b !== void 0 ? _b : 1,
            hentai_mode: (_c = args.hentaiMode) !== null && _c !== void 0 ? _c : 0
        });
        return true;
    }
}
exports.UserResolver = UserResolver;
