import { MRequestOptions } from '../../types/agent';
import { FormattedFollowedUpdates, PartialChapters, ReadChaptersStatus, SetHomePageSettingsArguments, User, UserManga, UserMangaRating, UserSettings } from '../../types/mangadex';
import { ApiBase, IncludeParams, PartialChaptersParams } from './base';
export interface GetUserFollowedUpdatesParams {
    /**
     * Include delayed chapters in the results.
     * Default `false`
     */
    delayed?: boolean;
    /**
     * Filter results based on whether the titles are marked as hentai.
     * 0 = Hide H, 1 = Show all, 2 = Show H only. Integer, default 0.
     */
    hentai?: number;
    /**
     * The current page of the paginated results.
     * Integer, default 1.
     */
    p?: number;
    /**
     * Filter the results by the follow type ID (i.e. 1 = Reading, 2 = Completed etc). Use 0 to remove filtering.
     * Integer, default 0.
     */
    type?: number;
}
export interface SetUserChapterReadParams {
    /**
     * Set or unset the chapter as read.
     * Boolean, default true.
     */
    read?: boolean;
}
export declare class UserResolver extends ApiBase {
    /**
     * Get a user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    getUser(userId: number | string, options?: MRequestOptions<'json'> & {
        params?: PartialChaptersParams;
    }): Promise<User>;
    /**
     * Get a user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    static getUser(userId: number | string, options?: MRequestOptions<'json'> & {
        params?: PartialChaptersParams;
    }): Promise<User>;
    /**
     * Get partial information about the chapters uploaded by the user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    getUserChapters(userId: number | string, options?: MRequestOptions<'json'> & {
        params?: IncludeParams;
    }): Promise<PartialChapters>;
    /**
     * Get partial information about the chapters uploaded by the user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    static getUserChapters(userId: number | string, options?: MRequestOptions<'json'> & {
        params?: IncludeParams;
    }): Promise<PartialChapters>;
    /**
     * (Authorization required) Get a user's followed manga and personal data for them.
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    getUserFollowedManga(userId: number | string, options?: MRequestOptions<'json'>): Promise<UserManga[]>;
    /**
     * (Authorization required) Get the latest uploaded chapters for the manga that the user has followed, as well as basic related manga information.
     * Ordered by timestamp descending (the datetime when the chapter is available).
     * Limit 100 chapters per page.
     * Note that the results are automatically filtered by the authorized user's chapter language filter setting.
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    getUserFollowedUpdates(userId: number | string, options?: MRequestOptions<'json'> & {
        params?: GetUserFollowedUpdatesParams;
    }): Promise<FormattedFollowedUpdates>;
    /**
     * Get a user's personal data for any given manga
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param mangaId Manga id
     * @param options Request options
     */
    getUserManga(userId: number | string, mangaId: number, options?: MRequestOptions<'json'>): Promise<UserManga>;
    /**
     * (Authorization required) Get a user's manga ratings
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    getUserRatings(userId: number | string, options?: MRequestOptions<'json'>): Promise<UserMangaRating[]>;
    /**
     * (Authorization required) Get a user's website settings.
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    getUserSettings(userId: number | string, options?: MRequestOptions<'json'>): Promise<UserSettings>;
    /**
     * (Authorization required) Set or unset chapter read markers.
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param chapters List of chapter IDs to set or unset. Max 100 items.
     * @param read Set or unset the chapter as read. Boolean, default true.
     * @param options Request options
     */
    setUserChapterRead(userId: number | string, chapters: number[], read?: boolean, options?: MRequestOptions<'json'>): Promise<ReadChaptersStatus>;
    /**
     * Get user info
     * @param options Request options
     */
    getMe(options?: MRequestOptions<'json'>): Promise<User>;
    setHomepageSettings(args: SetHomePageSettingsArguments, options?: MRequestOptions<'headers'>): Promise<boolean>;
}
