"use strict";
// docs: https://nodejs.org/dist/latest-v10.x/docs/api/https.html#https_https_request_url_options_callback
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = void 0;
const fs_1 = __importDefault(require("fs"));
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const querystring_1 = __importDefault(require("querystring"));
const zlib_1 = require("zlib");
const clean_object_1 = require("./lib/clean-object");
const deepmerge_1 = require("./lib/deepmerge");
const native_client_keys_1 = require("./lib/native-client-keys");
const merge_url_1 = require("./lib/merge-url");
const pkg = JSON.parse(fs_1.default.readFileSync('./package.json', 'utf-8'));
function request(url, options = {}, formData = null) {
    const [body, dataIsObject] = Object.prototype.toString.call(formData) === '[object Object]'
        ? [querystring_1.default.stringify(formData), true]
        : [formData, false];
    const mergedOptions = [
        {
            method: 'GET',
            responseType: 'text',
            headers: {
                'User-Agent': `smol-request/${pkg.version}`,
                Accept: '*/*'
            }
        }
    ];
    if (dataIsObject && body) {
        mergedOptions.push({
            headers: { 'Content-Length': Buffer.byteLength(body) }
        });
    }
    if (dataIsObject && typeof body === 'string') {
        mergedOptions.push({
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
        });
    }
    mergedOptions.push(options);
    if (options.responseType && options.responseType === 'buffer') {
        mergedOptions.push({
            headers: { 'Content-Type': 'application/octet-stream' }
        });
    }
    const requestOptions = deepmerge_1.deepmerge(mergedOptions[0], ...mergedOptions.slice(1));
    if (requestOptions.params && typeof requestOptions.params === 'object') {
        url = merge_url_1.mergeUrl(url, requestOptions.params);
    }
    return new Promise((resolve, reject) => {
        const client = url.startsWith('https') ? https_1.default : http_1.default;
        let resolved = false;
        const result = {
            data: null,
            headers: null,
            status: null,
            statusText: null
        };
        const cleanRequestOptions = clean_object_1.cleanObject(requestOptions, native_client_keys_1.nativeClientKeys);
        const req = client.request(url, cleanRequestOptions);
        req.on('error', onError);
        req.on('response', onResponse);
        req.on('close', onClose);
        if (requestOptions.headers) {
            Object.entries(requestOptions.headers).forEach(([name, value]) => req.setHeader(name, value));
        }
        function onClose() {
            if (resolved) {
                return;
            }
            switch (requestOptions.responseType) {
                case 'buffer': {
                    result.data = Buffer.concat(result.data);
                    break;
                }
                case 'json': {
                    try {
                        result.data = JSON.parse(result.data.join(''));
                    }
                    catch (e) {
                        return reject(new Error(`JSON parsing error: ${e.message}: ${result.data}`));
                    }
                    break;
                }
                default: {
                    result.data = result.data.join('');
                    break;
                }
            }
            resolve(result);
        }
        function onError(err) {
            req.removeListener('error', onError);
            reject(err);
        }
        function onResponse(res) {
            result.headers = res.headers;
            result.status = res.statusCode;
            result.statusText = res.statusMessage;
            if (requestOptions.responseType === 'headers') {
                resolved = true;
                return resolve(result);
            }
            const stream = ['gzip', 'compress', 'deflate'].includes(res.headers['content-encoding']) && res.statusCode === 204
                ? res.pipe(zlib_1.createUnzip())
                : res;
            if (requestOptions.responseType === 'stream') {
                result.data = stream;
                resolved = true;
                return resolve(result);
            }
            // stream.setEncoding('utf8')
            const responseData = [];
            const onData = (chunk) => {
                responseData.push(requestOptions.responseType === 'buffer' ? Buffer.from(chunk) : chunk);
            };
            const onError = (err) => {
                stream.removeListener('error', onError);
                stream.removeListener('data', onData);
                reject(err);
            };
            const onRequestEnd = () => {
                stream.removeListener('error', onError);
                stream.removeListener('data', onData);
                stream.removeListener('end', onRequestEnd);
                result.data = responseData;
            };
            stream.on('data', onData);
            stream.on('error', onError);
            stream.on('end', onRequestEnd);
        }
        if (body === null || !body) {
            req.end();
        }
        else if (Buffer.isBuffer(body) || typeof body === 'string') {
            req.write(body);
            req.end();
        }
        else {
            ;
            body.pipe(req);
        }
    });
}
exports.request = request;
