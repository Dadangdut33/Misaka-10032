/// <reference types="node" />
import fs from 'fs';
import http from 'http';
export interface RequestOptions<T = 'stream' | 'text' | 'buffer' | 'json' | 'headers'> extends http.RequestOptions {
    params?: {
        [x: string]: unknown;
    };
    responseType?: T;
}
export interface RequestResult<T = string> {
    data: T;
    headers: {
        [x: string]: unknown;
    };
    status: number;
    statusText: string;
}
export interface ResponseTypeMap<T = Record<string, unknown>> {
    stream: fs.ReadStream;
    text: string;
    buffer: Buffer;
    json: T;
    headers: null;
}
export declare type ResponseType = keyof ResponseTypeMap;
export declare function request<K, T extends ResponseType = 'text'>(url: string, options?: http.RequestOptions & {
    params?: {
        [x: string]: unknown;
    };
    responseType?: T;
}, formData?: Record<string, unknown> | string | fs.ReadStream): Promise<RequestResult<NonNullable<ResponseTypeMap<K>[T]>>>;
